@rendermode InteractiveServer
@inject NavigationManager nav
@inject ApplicationDbContext context
@inject BoardService boardService

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
			</NavLink>
		</div>


		@foreach (var board in boards)
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link fw-bold" href="@board.Url">

					<span class="@board.Img"></span>		 @board.Title

				</NavLink>
				@if (board.Boards is not null)
				{
					<div class="ms-4 mt-1">
						@foreach (var inboard in board.Boards)
						{
							<NavLink class="nav-link text-muted small" href="@inboard.Url">
								<span class="bi bi-lock-nav-menu" aria-hidden="true"></span> @inboard.Title
							</NavLink>
						}
					</div>
				}
			</div>
		}
		<div class="d-flex justify-content-center">
			<button class="btn btn-primary" @onclick="() => IsVisibleAddBoard = !IsVisibleAddBoard">+</button>

		</div>

		@if (IsVisibleAddBoard)
		{
			@*
			<span class="bi bi-house-door-fill-nav-menu"></span>
			<span class="bi bi-plus-square-fill-nav-menu"></span>
			<span class="bi bi-list-nested-nav-menu"></span>
			<span class="bi bi-lock-nav-menu"></span>
			<span class="bi bi-person-nav-menu"></span>
			<span class="bi bi-person-badge-nav-menu"></span>
			<span class="bi bi-person-fill-nav-menu"></span>
			<span class="bi bi-arrow-bar-left-nav-menu"></span>*@
			<EditForm Model="newBoard" OnValidSubmit="AddBoard">

				<select class="form-select" @bind="newBoard.Img">
					<option value="bi bi-house-door-fill-nav-menu">집</option>
					<option value="bi bi-plus-square-fill-nav-menu">네모십자</option>
					<option value="bi bi-list-nested-nav-menu">계단</option>
					<option value="bi bi-lock-nav-menu">자물쇠</option>
					<option value="bi bi-person-nav-menu">빈사람</option>
					<option value="bi bi-person-badge-nav-menu">핸폰사람</option>
					<option value="bi bi-person-fill-nav-menu">채운사람</option>
					<option value="bi bi-arrow-bar-left-nav-menu">벽밖화살</option>
				</select>
				<InputText class="form-control" @bind-Value="newBoard.Title" placeholder="hello" />
				<InputText class="form-control" @bind-Value="newBoard.Url" placeholder="/hello" />
				<button class="btn btn-secondary btn-sm" type="submit">추가</button>
			</EditForm>

			<EditForm Model="DeleteBoardName" OnValidSubmit="DeleteBoard">
				<InputText class="form-control" @bind-Value="@DeleteBoardName" placeholder="hello" />
				<button class="btn btn-secondary btn-sm" type="submit">삭제</button>
			</EditForm>
			<br />
			<br />
			<button @onclick="Reset">Reset Nav</button>

		}
	</nav>




</div>



@code {

	private async Task Reset()
	{
		await boardService.RemoveAllBoard();
	}

	string DeleteBoardName = string.Empty;

	private async Task DeleteBoard()
	{
		await boardService.RemoveBoardAsync(DeleteBoardName);
		nav.NavigateTo(nav.Uri, forceLoad: true);
	}


	Board newBoard = new();
	bool IsVisibleAddBoard = false;
	private async Task AddBoard()
	{
		if (newBoard.Title == string.Empty) { return; }
		await boardService.AddBoardAsync(newBoard);
		nav.NavigateTo(nav.Uri, forceLoad: true);
	}

	private List<Board> boards = new();
	private string? currentUrl;
	private bool isOpen = false;
	protected async override Task OnInitializedAsync()
	{
		boards = await boardService.GetAllBoardAsync();
		currentUrl = nav.ToBaseRelativePath(nav.Uri);
		nav.LocationChanged += OnLocationChanged;
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		currentUrl = nav.ToBaseRelativePath(e.Location);
		StateHasChanged();
	}

	public void Dispose()
	{
		nav.LocationChanged -= OnLocationChanged;
	}

	void tempMethod()
	{
		isOpen = !isOpen;
		nav.NavigateTo("/userclaims");
	}

}
