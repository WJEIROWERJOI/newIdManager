@page "/list"
@using System.Diagnostics
@using newIdManager.Data.ApplicationUsers
@inject ApplicationUserService applicationUserService
@inject NavigationManager nav
@rendermode InteractiveServer

<h1>사용자 리스트</h1>
<hr />
@if (message != null)
{
	<p style="color: green;">@message</p>
}

<!-- 검색 영역 -->
<div style="display:flex;justify-content: flex-end;">
	<div class="input-group" style="max-width: fit-content;">

		@if (!string.IsNullOrWhiteSpace(searchUser))
		{
			<button @onclick="CancelSearch" class="btn btn-secondary">검색 취소</button>
		}
		<select value="@searchTarget" @onchange="OnSelectChanged" class="form-select form-select-sm">
			<option value="UserName">UserName</option>
			<option value="Email">Email</option>
			<option value="Role">Role</option>
		</select>

		@if (searchTarget == "Role")
		{
			<select @bind="@searchUser" class="form-select form-select-sm">
				<option value="Admin">Admin</option>
				<option value="User">User</option>
			</select>
		}
		else
		{
			<InputText @bind-Value="@searchUser" class="form-control" />
		}

		<button type="button" @onclick="SearchUser" class="btn btn-secondary">검색</button>


	</div>
</div>

<!-- 테이블 -->
<table class="table">
	<thead>
		<tr>
			<th scope="col">UserName</th>
			<th scope="col">Email</th>
			<th scope="col">Role</th>
			<th scope="col">CreatedAt</th>
			<th scope="col">LastUpdatedAt</th>
			<th scope="col">옵션</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var usr in users)
		{
			<tr>
				<td>@usr.UserName</td>
				<td>@usr.Email</td>
				<td>@usr.Role</td>
				<td>@usr.CreatedAt.ToString("yyyy-MM-dd")</td>
				<td>@usr.LastUpdatedAt.ToString("yyyy-MM-dd hh:f")</td>
				<td>
					<AuthorizeView Roles="Admin">
						<Authorized>
							<button class="btn btn-primary btn-sm" @onclick="() => BeginEdit(usr, true)">수정</button>
							<button class="btn btn-primary btn-sm" @onclick="() => BeginEdit(usr, false)">비번</button>
							<button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal"
								data-bs-target="#abc">삭제</button>
							<div class="modal fade" id="abc" data-bs-keyboard="false" tabindex="-1">
								<div class="modal-dialog modal-dialog-centered">
									<div class="modal-content">
										<div class="modal-header">
											<h1 class="modal-title fs-3" id="abc">확인</h1>
											<button type="button" class="btn-close" data-bs-dismiss="modal"
												aria-label="Close"></button>
										</div>
										<div class="modal-body">
											@usr.UserName 을 삭제 하시겠습니까?
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-primary"
												@onclick="() => deleteUser(usr.UserName)">네</button>
											<button type="button" class="btn btn-secondary"
												data-bs-dismiss="modal">아니요</button>
										</div>
									</div>
								</div>
							</div>
						</Authorized>
						<NotAuthorized>
							<button class="btn btn-secondary btn-sm" @onclick="() => BeginEdit(usr, true)"
								disabled>수정</button>
							<button class="btn btn-secondary btn-sm" @onclick="() => BeginEdit(usr, false)"
								disabled>비번</button>
							<button class="btn btn-secondary btn-sm" @onclick="() => deleteUser(usr.UserName)"
								disabled>삭제</button>
						</NotAuthorized>
					</AuthorizeView>
				</td>
			</tr>
		}
	</tbody>
</table>

<!-- 수정 폼 -->
<UpdateModal ShowModal="@IsVisible" WhatVisible="@WhatVisible" updateUser="@updateUser" />
@* <UpdatePWDModal ShowModal="@IsVisible" updateUser="@updateUser" /> *@
<!-- 페이징 컴포넌트 -->
<Pagination TotalPages="@totalPage" CurrentPage="@Page" />

@code {

	private void OnSelectChanged(ChangeEventArgs e)
	{
		IsVisible = false;
		searchTarget = e.Value?.ToString();
		searchUser = "";
	}



	private List<ApplicationViewDto> users = new();
	private string? editingUserName = null;
	private ApplicationUpdateDto updateUser = new();
	private string? message;

	private bool IsVisible = false;
	private bool WhatVisible = false;

	// Query Parameters
	[SupplyParameterFromQuery]
	[Parameter]
	public string? searchUser { get; set; }
	[SupplyParameterFromQuery]
	[Parameter]
	public string? searchTarget { get; set; }

	[SupplyParameterFromQuery]
	[Parameter]
	public int Page { get; set; } = 1;
	private int totalPage = 0;
	private int pageSize = 5;

	protected override async Task OnParametersSetAsync()
	{
		if (string.IsNullOrWhiteSpace(searchTarget))
		{
			searchTarget = "UserName";
		}
		if (!string.IsNullOrWhiteSpace(searchUser) && !string.IsNullOrWhiteSpace(searchTarget))
		{
			totalPage = ((await applicationUserService.GetNumberOfSearchUser(searchUser, searchTarget) - 1) / pageSize) + 1;
			users = await applicationUserService.SearchUsersAsync(searchUser, searchTarget, Page, pageSize);
		}
		else
		{
			users = await applicationUserService.GetPageUsersAsync(Page, pageSize);
			totalPage = ((await applicationUserService.GetNumberOfUser() - 1) / pageSize) + 1;
		}
	}

	void BeginEdit(ApplicationViewDto usr, bool choose)
	{
		WhatVisible = choose;
		IsVisible = true;
		editingUserName = usr.UserName;
		updateUser = new ApplicationUpdateDto
		{
			Id = usr.Id,
			UserName = usr.UserName,
			Email = usr.Email,
			Role = usr.Role
		};
	}
	// void BeginPWDEdit(ApplicationViewDto usr)
	// {
	// IsPWDVisible = true;
	// editingUserName = usr.UserName;
	// updateUser = new ApplicationUpdateDto
	// {
	// Id = usr.Id,
	// UserName = usr.UserName,
	// Email = usr.Email,
	// Role = usr.Role
	// };
	// }



	// void CancelEdit()
	// {
	// IsVisible = false;
	// editingUserName = null;
	// }

	// async Task UpdateUser()
	// {
	// var result = await applicationUserService.UpdateAsync(updateUser);
	// if (result.Succeeded)
	// {
	// message = "수정 완료!";
	// editingUserName = null;
	// users = await applicationUserService.GetPageUsersAsync(Page, pageSize);
	// nav.NavigateTo($"/list?Page={Page}&searchTarget={searchTarget}&searchUser={searchUser}", forceLoad: true);
	// }
	// else
	// {
	// message = $"오류: {string.Join(", ", result.Errors.Select(e => e.Description))}";
	// }
	// IsVisible = false;
	// }
	// protected override void OnInitialized()
	// {
	// 주소가 바뀔 때마다 HandleLocationChanged() 호출
	// nav.LocationChanged += HandleLocationChanged;
	// }
	// private void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
	// {
	// 다른 쿼리(or 페이지)로 이동하면 모달 숨기기
	// IsVisible = false;
	// StateHasChanged();
	// }

	private async Task deleteUser(string name)
	{
		var result = await applicationUserService.DeleteAsync(name);
		if (result.Succeeded)
		{
			message = $"{name} 이 삭제되었습니다.";
			// users = await applicationUserService.GetPageUsersAsync(Page, pageSize);
		}
		else
		{
			message = $"삭제 실패: {string.Join(", ", result.Errors.Select(e => e.Description))}";
		}
		nav.NavigateTo($"/list?Page={Page}&searchTarget={searchTarget}&searchUser={searchUser}", forceLoad: true); // 기존 상태 유지
	}

	private void SearchUser()
	{
		nav.NavigateTo($"/list?Page=1&searchTarget={searchTarget}&searchUser={searchUser}", forceLoad: true); // 1번 페이지로 검색 결과확인
	}

	private void CancelSearch()
	{
		nav.NavigateTo("/list?Page=1");
	}
}
