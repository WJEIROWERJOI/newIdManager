@page "/userclaims"
@using System.Reflection
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>User info</PageTitle>

<h3>사용자 정보</h3>

@* 1. Claim 목록 출력 *@
@if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
{
    <h4>Claims:</h4>
    <ul>
        @foreach (var claim in user.Claims)
        {
            <li><strong>@claim.Type</strong>: @claim.Value</li>
        }
    </ul>

    <hr />

    @* 2. Identity 객체의 공개 프로퍼티 출력 (Reflection 사용) *@
    <h4>User.Identity Properties:</h4>
    <ul>
        @if (identityProperties != null)
        {
            @foreach (var prop in identityProperties)
            {
                <li>
                    <strong>@prop.Name</strong>: @prop.GetValue(user.Identity, null)
                </li>
            }
        }
    </ul>
}
else
{
    <p>사용자가 인증되지 않았습니다.</p>
}

@code {
    private ClaimsPrincipal? user;
    private PropertyInfo[] identityProperties {get;set;} = Array.Empty<PropertyInfo>();

    protected override async Task OnInitializedAsync()
    {
        // 현재 사용자 인증 상태를 가져옵니다.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user?.Identity != null)
        {
            // User.Identity의 공개 인스턴스 프로퍼티 목록을 가져옵니다.
            identityProperties = user.Identity.GetType()
                                             .GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
    }
}


