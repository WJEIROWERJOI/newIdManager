@inject CommentService commentService
@inject NavigationManager ngm
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

@if (comments.Count() != 0)
{
	<div style="max-width:80%;">
		<table class="table table-hover align-middle mt-4 shadow-sm rounded bg-white">
			<thead class="table-light">
				<tr>
					<th scope="col">작성자</th>
					<th scope="col">내용</th>
					<th scope="col">작성일</th>
					<th scope="col">기능</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var comment in comments)
				{
					<tr>
						<td class="fw-semibold">@comment.Author</td>
						<td style="white-space: pre-wrap;">@comment.Content</td>
						<td>@comment.CreatedAt.ToString("MM월 dd일 HH:mm")</td>
						<td>
							<button @onclick="() => DeleteComment(comment.Id)" class="btn btn-outline-danger btn-sm">
								삭제
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	<br />
}


<div class="card shadow-sm border-0 mt-4" style="max-width:80%;">

	<div class="card-body">
		<h5 class="card-title mb-3">댓글 작성</h5>

		<EditForm Model="@cmt" OnValidSubmit="@CreateComment">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />

			<div class="mb-3">
				<label class="form-label">작성자</label>
				<AuthorizeView>
					<Authorized Context="auth">
						<InputText class="form-control" @bind-Value="@cmt.Author" disabled />
					</Authorized>
					<NotAuthorized Context="noth">
						<InputText class="form-control" @bind-Value="@cmt.Author" />
					</NotAuthorized>
				</AuthorizeView>
			</div>

			<div class="mb-3">
				<label class="form-label">내용</label>
				<InputTextArea class="form-control" @bind-Value="@cmt.Content" rows="4" />
			</div>

			<div class="d-flex gap-2">
				<button type="submit" class="btn btn-primary">저장</button>
				<button type="button" class="btn btn-secondary" @onclick="CancelComment">취소</button>
			</div>
		</EditForm>
	</div>
</div>





@code {
	[Parameter]
	public int PostId { get; set; }


	[SupplyParameterFromForm]
	private CommentEntity cmt { get; set; } = new();
	private List<CommentEntity> comments= new();

	protected override async Task OnInitializedAsync()
	{
		comments = await commentService.GetAllComments(PostId);
		var authState = await AuthProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user?.Identity != null && user.Identity.IsAuthenticated)
		{
			cmt.Author = user.Identity?.Name ?? string.Empty;
		}
	}

	private async Task CreateComment()
	{
		cmt.PostId = PostId;
		cmt.CreatedAt = DateTime.UtcNow;
		cmt.UpdatedAt = DateTime.UtcNow;
		await commentService.AddComment(cmt);
		ngm.NavigateTo($"/posts/lists/{PostId}", forceLoad: true);
	}
	private void CancelComment()
	{
		cmt = new();
		ngm.NavigateTo($"/posts/lists/{PostId}", forceLoad: false);
	}

	private async Task DeleteComment(int id)
	{
		await commentService.DeleteComment(id);
		ngm.NavigateTo($"/posts/lists/{PostId}", forceLoad: true);
	}


}
